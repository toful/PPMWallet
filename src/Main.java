/**Privacy Preserving Multiplatform Wallet
 * MainClass
 * Author: Cristòfol Daudén Esmel
 */

import contracts.SKM_SC;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.http.HttpService;
import org.web3j.tx.ClientTransactionManager;
import org.web3j.tx.gas.DefaultGasProvider;
import org.web3j.tx.gas.StaticGasProvider;

import java.math.BigInteger;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.util.*;




public class Main {

    private static Web3j web3j;
    private static DefaultGasProvider gasProvider;
    private static StaticGasProvider gasProvider2;
    private static EntitiesManager entities;
    private static SKM_SC_Manager skmSCManager;

    private static MessageDigest digest;




    public static void main( String args[] )  throws Exception {

        //create a Web3j instance to our local Ethereum node (Ganache)
        web3j = Web3j.build( new HttpService("http://localhost:8545") );

        gasProvider = new DefaultGasProvider();
        gasProvider2 = new StaticGasProvider( BigInteger.valueOf(1), BigInteger.valueOf(6721974) );

        //Getting the accounts generated by Ganache
        entities = new EntitiesManager( web3j.ethAccounts().send().getAccounts().toArray( new String[0] ), web3j );
        skmSCManager = SKM_SC_Manager.getSKM_SC_Manager( web3j, gasProvider2 );

        digest = MessageDigest.getInstance("SHA-256");

        menu();

        web3j.shutdown();

    }

    public static void menu(){
        Scanner sn = new Scanner(System.in);
        boolean end = false; int option; String option2;
        SKM_SC contract = null;
        int i = 0;
        while (!end) {
            System.out.println("Select Operation:");
            System.out.println("1. Create a new SKM SC");
            System.out.println("2. Add a new device to the SKM SC");
            System.out.println("3. Remove an existing device from the SKM SC");
            System.out.println("4. Store a new Ref in the IPFS by plugin");
            System.out.println("5. Get Ref of the IPFS by plugin");
            System.out.println("6. Store a new Ref in the IPFS by smartphone");
            System.out.println("7. Get Ref of the IPFS by smartphone");
            System.out.println("8. Store Temp value");
            System.out.println("9. Get Temp value");
            System.out.println("10. Exit");
            try {
                option = sn.nextInt();
                switch (option) {
                    case 1:
                        contract = skmSCManager.newSKM_SC( entities.transactionManagerSmartphoneApp );
                        break;
                    case 2:
                        skmSCManager.addDevice( contract, String.valueOf( entities.plugins[i] ) );
                        i++;
                        break;
                    case 3:
                        i--;
                        skmSCManager.removeDevice( contract, String.valueOf( entities.plugins[i] ) );
                        break;
                    case 4:
                        skmSCManager.storeRefPlugin(
                                SKM_SC.load( contract.getContractAddress(),
                                    web3j, entities.transactionManagerPlugins[0], gasProvider2),
                                    new BigInteger( randomHash(), 16 ) );
                        break;
                    case 5:
                        skmSCManager.getRefPlugin(
                                SKM_SC.load( contract.getContractAddress(),
                                        web3j, entities.transactionManagerPlugins[0], gasProvider2) );
                        break;
                    case 6:
                        skmSCManager.storeRefSmartphone( contract, "0", new BigInteger( randomHash(), 16 ) );
                        break;
                    case 7:
                        skmSCManager.getRefSmartphone( contract, "0" );
                        break;
                    case 8:
                        skmSCManager.storeTemp( contract, new BigInteger( randomHash(), 16 ) );
                        break;
                    case 9:
                        skmSCManager.getTemp( contract );
                        break;
                    case 10:
                        end = true;
                        break;
                    default:
                        System.out.println("Not a valid option");
                }
            } catch (InputMismatchException e) {
                System.out.println("Insert a valid option");
                sn.next();
            } catch (Exception e) {
                e.printStackTrace();
                sn.next();
            }
        }
    }


    private static String randomHash() {

        byte[] array = new byte[7]; // length is bounded by 7
        new Random().nextBytes(array);
        String generatedString = new String(array, Charset.forName("UTF-8"));
        byte[] encodedhash = digest.digest( generatedString.getBytes( StandardCharsets.UTF_8 ) );


        StringBuilder hexString = new StringBuilder(2 * encodedhash.length);
        for (int i = 0; i < encodedhash.length; i++) {
            String hex = Integer.toHexString(0xff & encodedhash[i]);
            if(hex.length() == 1) {
                hexString.append('0');
            }
            hexString.append(hex);
        }
        return hexString.toString();
    }





}